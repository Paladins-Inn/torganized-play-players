---
spring:
    application:
        name: dcis-players
        admin:
            enabled: true
    main:
        banner-mode: off

    datasource:
        url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:changeme}
        username: ${DB_USER:postgres}
        password: ${DB_PASSWORD:postgres}

        hikari:
            connectionTimeout: 20000
            maximumPoolSize: 5

        jpa:
            hibernate:
                ddl-auto: validate
                dialect: org.hibernate.dialect.PostgreSQLDialect
    
    liquibase:
        enabled: false
        show-summary-output: log
        ui-service: log

#    mvc:
#        servlet:
#            path: /players

    security:
        user:
            name: monitor
            password: observing
            roles: OBSERVER
        oauth2:
            client:
                registration:
                    sso:
                        clientId: ${SSO_CLIENT_ID}
                        clientSecret: ${SSO_CLIENT_SECRET}
                        provider: sso
                        authorizationGrantType: authorization_code
                        scope: openid,profile,roles,microprofile-jwt

                provider:
                    sso:
                        issuerUri: ${SSO_URI}
                        userNameAttribute: ${SSO_USER_NAME_ATTRIBUTE:preferred_username}
            resourceserver:
                jwt:
                    issuerUri: ${SSO_URI}
                    jwkSetUri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

kp:
    security:
        keycloak:
            group-authority-mapper:
                role-attribute: groups

server:
    error:  
        whitelabel:
            enabled: false
    servlet:
        contextPath: /players

management:
    tracing:
        sampling:
            probability: 1
    endpoint:
        health:
            probes:
                enabled: true
    endpoints:
        web:
            exposure:
                include: health,info,env,prometheus
    health:
        livenessState:
            enabled: true
        readinessState:
            enabled: true




logging:
    group:
        rest: de.paladinsinn.tp.dcis.api,org.springframework.web,org.springframework.http
    level:
        web: INFO
        security: INFO
        rest: INFO
        liquibase: TRACE
        de:
            paladinsinn: TRACE
        org:
            springframework:
                web:
                    filter:
                        CommonsRequestLoggingFilter: DEBUG
