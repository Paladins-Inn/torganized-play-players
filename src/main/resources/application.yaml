---
spring:
    application:
        name: dcis-players
        admin:
            enabled: true
    main:
        banner-mode: off

    datasource:
        url: ${PGO_pgbouncer-jdbc-uri}
        username: ${PGO_user:postgres}
        password: ${PGO_password:postgres}
        driverClassName: org.postgresql.Driver

        hikari:
            connectionTimeout: 20000
            maximumPoolSize: 5

    jpa:
        database: POSTGRESQL
        showSql: true
        hibernate:
            ddlAuto: validate
    
    liquibase:
        enabled: true
        showSummaryOutput: console
        uiService: console

    security:
        user:
            name: monitor
            password: observing
            roles: ACTUATOR
        oauth2:
            client:
                registration:
                    sso:
                        provider: sso
                        clientId: ${SSO_CLIENT_ID}
                        clientSecret: ${SSO_CLIENT_SECRET}
                        scope: ${SSO_SCOPES}
                        authorizationGrantType: client_credentials
                provider:
                    sso:
                        issuerUri: ${SSO_ISSUER}
                        userNameAttribute: ${SSO_USERNAME_ATTRIBUTE:preferred_username}
            resourceserver:
                jwt:
                    issuerUri: ${spring.security.oauth2.client.provider.sso.issuerUri}
                    jwkSetUri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

kp:
    security:
        keycloak:
            groupAuthorityMapper:
                roleAttribute: groups

server:
    error:  
        whitelabel:
            enabled: false
    port: ${HTTP_PORT:8080}
    servlet:
        contextPath: /players

management:
    server:
        port: ${METRICS_PORT:8081}
        contextPath: /
    ssl:
        enabled: false
    tracing:
        sampling:
            probability: 1
    endpoint:
        health:
            probes:
                enabled: true
    endpoints:
        web:
            exposure:
                include: health,info,env,prometheus
    health:
        livenessState:
            enabled: true
        readinessState:
            enabled: true




logging:
    group:
        rest: de.paladinsinn.tp.dcis.api,org.springframework.web,org.springframework.http
    level:
        web: WARN
        security: TRACE
        rest: TRACE
        liquibase: INFO
        de:
            paladinsinn: TRACE
        org:
            springframework:
                web:
                    filter:
                        CommonsRequestLoggingFilter: DEBUG
